// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var Verifier = artifacts.require('Verifier');


// - use the contents from proof.json generated from zokrates steps
var proof = {
  "proof": {
      "a": ["0x119b6aebc355bae33cab1e31d69ea93ef28cee83494a2bfd102ff63ec015d185", "0x2c3c0073f7788fb0d775b8f7bea06cfa34f54fe47fc114759e0be9f0c21ec903"],
      "b": [["0x23419498c08df312c1e821ed197f4e8ad093a32e3926618f443c8f3b37b87e67", "0x2d63d1700df834b81c1e8f052690a205c8e82a255a04c122a01695e8812b8b98"], ["0x03de653ad1a4bac382f81bbbeed3fdf144c483bb5d5c2f5aa3844ec99f68a969", "0x0b67f710787b588369c003189d1acbc68f6629b32fffb1a0b75af92dbad3b213"]],
      "c": ["0x23496f50a84bc70e3cfae3c0a68e2b874ed10603825440809b4bdff8dbdf3324", "0x023e06f393e026ff227f4aab5f4c36db02636a823c2d3ce9b47b7c7ee67c9fdf"]
  },
  "inputs": ["0x0000000000000000000000000000000000000000000000000000000000000009", "0x0000000000000000000000000000000000000000000000000000000000000001"]
};


contract('Verifier', accounts => {
  const account = accounts[0];
  const a = proof.proof.a;
  const b = proof.proof.b;
  const c = proof.proof.c;
  const accurate = proof.inputs;
  const inaccurate = [1, 1];

  describe('verifier test', () => {
    beforeEach(async() => {
      this.contract = await Verifier.new({from: account});
    });

    it('Test verification with correct proof', async() => {
      let contractVerified = await this.contract.verifyTx.call(a, b, c, accurate, { from: account});
      assert.equal(contractVerified, true, "This verification should have the correct proof.");
    });

    it('Test verification with incorrect proof', async() => {
      let contractVerified = await this.contract.verifyTx.call(a, b, c, inaccurate, { from: account});
      assert.equal(contractVerified, false, "This verification should not have the correct proof.");
    });

  });

});
